// ============================================================================
// File: make-market/mm.js
// Description:
// Created by: Vina Network
// ============================================================================

// X·ª≠ l√Ω g·ª≠i form v√† hi·ªÉn th·ªã ti·∫øn tr√¨nh
document.getElementById('makeMarketForm').addEventListener('submit', async function (e) {
  e.preventDefault();

  const form = e.target;
  const formData = new FormData(form);
  const privateKey = formData.get('privateKey');
  const statusBox = document.getElementById('mm-status');
  statusBox.innerHTML = '<p>‚è≥ ƒêang th·ª±c hi·ªán Make Market...</p>';

  try {
    // L·∫•y SECRET_KEY t·ª´ server (gi·∫£ ƒë·ªãnh API b·∫£o m·∫≠t)
    const keyResponse = await fetch('/api/get-encryption-key', {
      method: 'POST',
      headers: { 'Authorization': 'Bearer your-auth-token' } // Thay b·∫±ng token x√°c th·ª±c th·ª±c t·∫ø
    });
    const { secretKey } = await keyResponse.json();
    if (!secretKey) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c kh√≥a m√£ h√≥a');

    // T·∫°o IV ng·∫´u nhi√™n
    const iv = CryptoJS.lib.WordArray.random(16);
    const encryptedPrivateKey = CryptoJS.AES.encrypt(privateKey, secretKey, { iv: iv }).toString();

    // G·ª≠i d·ªØ li·ªáu m√£ h√≥a v√† IV
    formData.set('privateKey', encryptedPrivateKey);
    formData.append('iv', iv.toString(CryptoJS.enc.Base64));

    const response = await fetch('mm-api.php', {
      method: 'POST',
      body: formData
    });
    const data = await response.json();

    let html = '';
    if (data.message) {
      html += `<p><strong>${data.message}</strong></p>`;
    }
    if (data.success && Array.isArray(data.results)) {
      html += `<p>‚úÖ ƒê√£ x·ª≠ l√Ω ${data.results.length} v√≤ng Make Market:</p><ul>`;
      data.results.forEach(round => {
        html += `<li>üåÄ V√≤ng ${round.round}: `;
        if (round.error) {
          html += `‚ùå ${round.error}`;
        } else {
          html += `üõí <a href="https://solscan.io/tx/${round.buyTx}" target="_blank">Mua (ƒê√£ x√°c nh·∫≠n)</a> ‚Äì 
                   üí∏ <a href="https://solscan.io/tx/${round.sellTx}" target="_blank">B√°n (ƒê√£ x√°c nh·∫≠n)</a>`;
        }
        html += `</li>`;
      });
      html += '</ul>';
    } else if (!data.success) {
      if (data.error) {
        // Hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ
        let errorMessage = data.error;
        if (data.error.includes('Slippage qu√° cao')) {
          errorMessage = '‚ö†Ô∏è Giao d·ªãch th·∫•t b·∫°i do tr∆∞·ª£t gi√° v∆∞·ª£t qu√° m·ª©c cho ph√©p';
        } else if (data.error.includes('Kh√¥ng ƒë·ªß thanh kho·∫£n')) {
          errorMessage = '‚ö†Ô∏è Giao d·ªãch th·∫•t b·∫°i do pool kh√¥ng ƒë·ªß thanh kho·∫£n';
        }
        html += `<p>‚ùå L·ªói: ${errorMessage}</p>`;
      }
    }
    statusBox.innerHTML = html;
  } catch (err) {
    statusBox.innerHTML = `<p>‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c h·ªá th·ªëng: ${err.message}</p>`;
  }
});
